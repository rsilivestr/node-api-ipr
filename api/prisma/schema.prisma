generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(50)
  surname     String?   @db.VarChar(50)
  avatar      String?
  login       String?   @unique @db.VarChar(30)
  passwd_hash String?
  is_admin    Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  author      Author?
  comments    Comment[]

  @@map("users")
}

model Author {
  id          Int     @id @default(autoincrement())
  user_id     Int     @unique
  description String?
  user        User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drafts      Draft[]
  posts       Post[]

  @@map("authors")
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String     @unique @db.VarChar(50)
  parent_id        Int?
  categories       Category?  @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_categories Category[] @relation("categoriesTocategories")
  drafts           Draft[]
  posts            Post[]

  @@map("categories")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)

  @@map("tags")
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(100)
  body         String
  poster       String?
  images       String[]
  tags         Int[]     @default([])
  author_id    Int
  category_id  Int
  is_published Boolean?  @default(false)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @db.Timestamp(6)
  published_at DateTime? @db.Timestamp(6)
  comments     Comment[]
  drafts       Draft[]
  author       Author    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category     Category  @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("posts")
}

model Draft {
  id          Int       @id @default(autoincrement())
  post_id     Int
  author_id   Int
  title       String    @db.VarChar(100)
  body        String
  poster      String?
  images      String[]
  tags        Int[]     @default([])
  category_id Int
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  author      Author    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categories  Category  @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post        Post      @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("drafts")
}

model Comment {
  id         Int       @id @default(autoincrement())
  body       String
  user_id    Int
  post_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  post       Post      @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  created_by User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("comments")
}
